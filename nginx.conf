# this is needed to nginx has permission to the php socket, which runs under user www-data
user www-data;

#load dynamic modules or they won't be available
load_module /etc/nginx/modules/ngx_http_image_filter_module.so;

# ------------------------------------------------------------------------------
# WORKERS

#change where the pid file is stored
# pid /var/run/new_nginx.pid;

#specify number of workers
#"auto" spawns 1 worker for each CPU core
worker_processes auto;

events {
    #specifies how many connections each worker can accept
    worker_connections 1024;
}

# ------------------------------------------------------------------------------

http {
    # needed for gzip to work
    gzip on;
    gzip_comp_level 3; #above 5 server needs to spend a lot of resource and incremental compression not worth it
    gzip_types text/css text/javascript;
    
    # needed for nginx to correctly rec and serve files like /text/html, /text/css
    include mime.types;
    
    #define new memory zone - for rate limiting
    # binary_remote_addr = means we want to apply rate limiting per ip addr that's connecting to us, which is per user
    #limit_req_zone $binary_remote_addr
    # this will limit connections per request uri to 60 requests per minute
    limit_req_zone $request_uri zone=MYZONE:10m rate=60r/m;
    
    # remove nginx version from response headers
    server_tokens off;
    
    #redirect traffic from 80 to 443
    server {
        listen 80;
        server_name 3.140.69.254;
        # 301 = redirect permanently
        return 301 https://$server_name$request_uri;
    }
    
    server {
        listen 443 ssl http2; #when port 443 is hit, use both ssl and http2 modules
        server_name 3.140.69.254;
        root /sites/demo;
        
        
        #===============================================================================
        #SECURITY
        
        # ------------------------------------------------------------------------------
        # HARDENING NGINX
        
        # prevents other users from embedding our website inside of iframes
        add_header X-Frame-Options "SAMEORIGIN";
        # tell the browser that if it detects XSS prevent from loading the page
        add_header X-XSS-Protection "1; mode=block";
        
        # ------------------------------------------------------------------------------
        # AUTH
        
        #location / {
        #    auth_basic "Secure Area";
        #    auth_basic_user_file /etc/nginx/.htpasswd;
        #    try_files $uri $uri/ =404;
        #}
        
        # ------------------------------------------------------------------------------
        # RATE LIMITING
        
        # the burst=5 setting is saying "take the 5 connections over the limit and save them. they will still be replied 1/s, but at least we're not rejecting them"
        limit_req zone=MYZONE burst=5;
        
        # ------------------------------------------------------------------------------
        # SSL
        
        # a lot of small things that we need to do to enable sll to work properly
        
        ssl_certificate /etc/nginx/ssl/self.crt;
        ssl_certificate_key /etc/nginx/ssl/self.key;
        
        #replace ssl with tls
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        
        #pick secure cipher suite
        ssl_prefer_server_ciphers on;
        ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;
        
        #enable DH key exchange
        ssl_dhparam /etc/nginx/ssl/dhparam.pem;
        
        #HSTS = this header tells the browser not to load anything over http
        add_header Strict-Transport-Security "max-age=31536000" always;
        
        #allows the server to cache the handshake for a certain amount of time
        ssl_session_cache shared:SSL:40m;
        ssl_session_timeout 4h;
        ssl_session_tickets on;
        
        
        #===============================================================================
        #PERFORMANCE OPTIMIZATION SECTION
        
        # ------------------------------------------------------------------------------
        # PUSHING FILES
        
        # when index.html is requested these 2 assets will be pushed up to the server as well
        location = /index.html {
            #note we're specifying a request for a file rather than file's location
            http2_push /style.css;
            http2_push /thumb.png;
        }
        
        # ------------------------------------------------------------------------------
        # EXPIRES HEADER

        location = /head {
            add_header my_header 'hello world!';
            return 200 'whatever';
        }
        
        location = /expire_head {
            add_header Cache-Control public;
            add_header Pragma public;
            # to expire in 60m
            expires 60m; 
            return 200 'duh';
        }
        
        location ~ \.(css|js|jpg|png)$ {
            # response can vary based on the value of the "Accept Encoding" header included in the request
            # this is telling us whether they'd accept an encoded (gzipped) file
            add_header Vary Accept-Encoding;
        }


        #===============================================================================
        #BASICS SECTION

        # ------------------------------------------------------------------------------
        # DYNAMIC MODULES
        
        #lets use the newly installed image filter module
        location = /thumb.png {
            image_filter rotate 180;
        }

        # ------------------------------------------------------------------------------
        # PHP / DYNAMIC CONTENT
        # in this case nginx is acting as reverse proxy
        
        # serve .php if present, otherwise .html
        index index.php index.html;
        
        # this location will take care of any requests for static content
        location / {
            # try a file > try a folder > show the default 404 from nginx
            try_files $uri $uri/ =404;
        }
        
        #this will overwrite the aboce in case the requested file ends with .php
        location ~\.php$ {
            #fastcgi is how nginx communicates with php (could have used standard http but this is faster)
            include fastcgi.conf;
            #"unix:" means it's a socket - here we installed php server separately and made sure it's running on that socket
            fastcgi_pass unix:/run/php/php7.2-fpm.sock;
        }

        # ------------------------------------------------------------------------------
        # LOGGING

        #log to a custom file
        location /secure {
            access_log /var/log/nginx/secure.access.log;
            return 200 "wowza so much secure";
        }
        
        location /disabled {
            access_log off;
            return 200 "wowza no logging to be seen here";
        }
        
        # ------------------------------------------------------------------------------
        # TRY FILES
        
        #SIMPLE CASE
        #dont forget the slashes!!! in front of all 3: /location /file_path /rewrite_path
        #this one succeeds
        location /gonna_try {
            try_files /thumb.png /user_profile;            
        }
        #this one redirects
        location /gonna_try2 {
            try_files /notthumb.png /user_profile;            
        }
        
        #COMPLEX CASE
        # here we're rewriting the home page to be the access uri first > some files that dont exist > redirect
        # /user_profile/ wont load coz it doesn't exist as a file - only as a route; and the penultimate arg is not rewriting/redirecting, only the last one
        try_files $uri /cat.png /dog.png /user_profile /friendly_404 @friendly_405;
        
        location /friendly_404 {
            return 404 "out of luck buddy:(";
        }
        
        #named locations: use the @ sign to name a location
        location @friendly_405 {
            return 404 "out of luck buddy:( 4055555";
        }
        
        
        # ------------------------------------------------------------------------------
        # REDIRECTS
        
        #any request for /user/xyz will now activate the route below, THE URL HOWEVER WONT CHANGE!
        #by wrapping \w+ in () we're making it accessible as $1 in the internal uri
        #the "last" flag at the end makes sure this is the last time this uri gets rewritten - so 2nd redirect work work
        rewrite ^/user/(\w+) /user_profile/$1 last;
        
        #lets add a 2nd rewrite, which will be hit after the 1st rewrite
        rewrite ^/user_profile/john /thumb.png;
        
        location /user_profile {
            return 200 "you made it this far!";
        }
        
        location /user_profile/john {
            return 200 "you made it this far JONNY BOI!";
        }
        
        location /logo {
            return 307 /thumb.png;
        }
        
        
        # ------------------------------------------------------------------------------
        # VARIABLES
        
        #working with own variables
        set $weekend 'No';
        
        if ( $date_local ~ 'Saturday|Sunday|Tuesday' ) {
            set $weekend 'Yes';
        }
        
        location /weekend {
            return 200 "Is today a weekend? $weekend";
        }
        
        # when doing conditionals, we should do them OUTSIDE of location blocks
        # this will prevent index.html loading as a whole, unless we pass the key
        #if ( $arg_apikey != 1234 ) {
        #    return 401 "Incorrect API key"
        #}
        
        location /inspec {
            return 200 "$host\n$uri\n$args\nCan also show args like this: $arg_name";
        }
        
        # ------------------------------------------------------------------------------
        # MATCHINGS
        
        # normal match (anything starting with/greet... will be matched)
        location /greet {
            return 200 'hello from greet!';
        }
        
        # exact match (add "=")
        location = /hello {
            return 200 'hello from hello!';
        }
        
        #regex match (case sensitive)
        location ~ /howdy[0-9] {
            return 200 'hello from howdy!';
        }
        
        #regex match (case INsensitive)
        location ~* /popeye[0-9] {
            return 200 'hello from popeye - CASE INSENSITIVE!';
        }
        
        #preferential prefix - basically overwrites whatever else you have there
        location ^~ /howdy5 {
            return 200 'hello from OVERWRITTEN!';
        }
    }
}
